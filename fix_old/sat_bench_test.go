// Code generated by by github.com/pfcm/fxp/fix/gen DO NOT EDIT.

package fix

import (
	"math/rand"
	"testing"
)

func BenchmarkUsadd(b *testing.B) {
	b.Run("random", func(b *testing.B) {
		const n = 1 << 16
		var as, bs [n]uint8
		for i := range as {
			as[i] = uint8(i)
			bs[i] = uint8(i)
		}
		shuffleSlice(as[:])
		shuffleSlice(bs[:])
		b.Run("usadd______________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := usadd(as[j], bs[j])
				_ = x
			}
		})
		b.Run("usaddpre___________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := usaddpre(as[j], bs[j])
				_ = x
			}
		})
		b.Run("usaddpost__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := usaddpost(as[j], bs[j])
				_ = x
			}
		})
		b.Run("usaddpostbranchless", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := usaddpostbranchless(as[j], bs[j])
				_ = x
			}
		})

	})
	b.Run("small", func(b *testing.B) {
		b.Run("usadd______________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usadd(1, 2)
				_ = x
			}
		})
		b.Run("usaddpre___________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usaddpre(1, 2)
				_ = x
			}
		})
		b.Run("usaddpost__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usaddpost(1, 2)
				_ = x
			}
		})
		b.Run("usaddpostbranchless", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usaddpostbranchless(1, 2)
				_ = x
			}
		})

	})
	b.Run("big", func(b *testing.B) {
		b.Run("usadd______________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usadd(126, 127)
				_ = x
			}
		})
		b.Run("usaddpre___________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usaddpre(126, 127)
				_ = x
			}
		})
		b.Run("usaddpost__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usaddpost(126, 127)
				_ = x
			}
		})
		b.Run("usaddpostbranchless", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usaddpostbranchless(126, 127)
				_ = x
			}
		})

	})
}

func BenchmarkUssub(b *testing.B) {
	b.Run("random", func(b *testing.B) {
		const n = 1 << 16
		var as, bs [n]uint8
		for i := range as {
			as[i] = uint8(i)
			bs[i] = uint8(i)
		}
		shuffleSlice(as[:])
		shuffleSlice(bs[:])
		b.Run("ussub__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := ussub(as[j], bs[j])
				_ = x
			}
		})
		b.Run("ussubbranch____", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := ussubbranch(as[j], bs[j])
				_ = x
			}
		})
		b.Run("ussubbranchless", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := ussubbranchless(as[j], bs[j])
				_ = x
			}
		})
		b.Run("ussubmin_______", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := ussubmin(as[j], bs[j])
				_ = x
			}
		})

	})
	b.Run("small", func(b *testing.B) {
		b.Run("ussub__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ussub(1, 2)
				_ = x
			}
		})
		b.Run("ussubbranch____", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ussubbranch(1, 2)
				_ = x
			}
		})
		b.Run("ussubbranchless", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ussubbranchless(1, 2)
				_ = x
			}
		})
		b.Run("ussubmin_______", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ussubmin(1, 2)
				_ = x
			}
		})

	})
	b.Run("big", func(b *testing.B) {
		b.Run("ussub__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ussub(126, 127)
				_ = x
			}
		})
		b.Run("ussubbranch____", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ussubbranch(126, 127)
				_ = x
			}
		})
		b.Run("ussubbranchless", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ussubbranchless(126, 127)
				_ = x
			}
		})
		b.Run("ussubmin_______", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ussubmin(126, 127)
				_ = x
			}
		})

	})
}

func BenchmarkUsmul(b *testing.B) {
	b.Run("random", func(b *testing.B) {
		const n = 1 << 16
		var as, bs [n]uint8
		var fs [n]uint8
		for i := range as {
			as[i] = uint8(i)
			bs[i] = uint8(i)
			fs[i] = uint8(i)
		}
		shuffleSlice(as[:])
		shuffleSlice(bs[:])
		shuffleSlice(fs[:])
		b.Run("usmul_____________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := usmul(as[j], bs[j], fs[j])
				_ = x
			}
		})
		b.Run("usmulbig__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := usmulbig(as[j], bs[j], fs[j])
				_ = x
			}
		})
		b.Run("usmulbigmin_______", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := usmulbigmin(as[j], bs[j], fs[j])
				_ = x
			}
		})
		b.Run("usmulbigbranchless", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := usmulbigbranchless(as[j], bs[j], fs[j])
				_ = x
			}
		})
		b.Run("usmulbits_________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := usmulbits(as[j], bs[j], fs[j])
				_ = x
			}
		})

	})
	b.Run("small", func(b *testing.B) {
		b.Run("usmul_____________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usmul(1, 2, 3)
				_ = x
			}
		})
		b.Run("usmulbig__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usmulbig(1, 2, 3)
				_ = x
			}
		})
		b.Run("usmulbigmin_______", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usmulbigmin(1, 2, 3)
				_ = x
			}
		})
		b.Run("usmulbigbranchless", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usmulbigbranchless(1, 2, 3)
				_ = x
			}
		})
		b.Run("usmulbits_________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usmulbits(1, 2, 3)
				_ = x
			}
		})

	})
	b.Run("big", func(b *testing.B) {
		b.Run("usmul_____________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usmul(126, 127, 6)
				_ = x
			}
		})
		b.Run("usmulbig__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usmulbig(126, 127, 6)
				_ = x
			}
		})
		b.Run("usmulbigmin_______", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usmulbigmin(126, 127, 6)
				_ = x
			}
		})
		b.Run("usmulbigbranchless", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usmulbigbranchless(126, 127, 6)
				_ = x
			}
		})
		b.Run("usmulbits_________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := usmulbits(126, 127, 6)
				_ = x
			}
		})

	})
}

func BenchmarkSsadd(b *testing.B) {
	b.Run("random", func(b *testing.B) {
		const n = 1 << 16
		var as, bs [n]int8
		for i := range as {
			as[i] = int8(i)
			bs[i] = int8(i)
		}
		shuffleSlice(as[:])
		shuffleSlice(bs[:])
		b.Run("ssadd__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := ssadd(as[j], bs[j])
				_ = x
			}
		})
		b.Run("ssaddbranch____", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := ssaddbranch(as[j], bs[j])
				_ = x
			}
		})
		b.Run("ssaddbranchless", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := ssaddbranchless(as[j], bs[j])
				_ = x
			}
		})
		b.Run("ssaddbig_______", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := ssaddbig(as[j], bs[j])
				_ = x
			}
		})

	})
	b.Run("small", func(b *testing.B) {
		b.Run("ssadd__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ssadd(1, 2)
				_ = x
			}
		})
		b.Run("ssaddbranch____", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ssaddbranch(1, 2)
				_ = x
			}
		})
		b.Run("ssaddbranchless", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ssaddbranchless(1, 2)
				_ = x
			}
		})
		b.Run("ssaddbig_______", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ssaddbig(1, 2)
				_ = x
			}
		})

	})
	b.Run("big", func(b *testing.B) {
		b.Run("ssadd__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ssadd(126, 127)
				_ = x
			}
		})
		b.Run("ssaddbranch____", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ssaddbranch(126, 127)
				_ = x
			}
		})
		b.Run("ssaddbranchless", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ssaddbranchless(126, 127)
				_ = x
			}
		})
		b.Run("ssaddbig_______", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ssaddbig(126, 127)
				_ = x
			}
		})

	})
}

func BenchmarkSssub(b *testing.B) {
	b.Run("random", func(b *testing.B) {
		const n = 1 << 16
		var as, bs [n]int8
		for i := range as {
			as[i] = int8(i)
			bs[i] = int8(i)
		}
		shuffleSlice(as[:])
		shuffleSlice(bs[:])
		b.Run("sssub_____________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := sssub(as[j], bs[j])
				_ = x
			}
		})
		b.Run("sssubbig__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := sssubbig(as[j], bs[j])
				_ = x
			}
		})
		b.Run("sssubadd__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := sssubadd(as[j], bs[j])
				_ = x
			}
		})
		b.Run("sssubaddlessbranch", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := sssubaddlessbranch(as[j], bs[j])
				_ = x
			}
		})
		b.Run("sssubdirect_______", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := sssubdirect(as[j], bs[j])
				_ = x
			}
		})

	})
	b.Run("small", func(b *testing.B) {
		b.Run("sssub_____________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := sssub(1, 2)
				_ = x
			}
		})
		b.Run("sssubbig__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := sssubbig(1, 2)
				_ = x
			}
		})
		b.Run("sssubadd__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := sssubadd(1, 2)
				_ = x
			}
		})
		b.Run("sssubaddlessbranch", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := sssubaddlessbranch(1, 2)
				_ = x
			}
		})
		b.Run("sssubdirect_______", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := sssubdirect(1, 2)
				_ = x
			}
		})

	})
	b.Run("big", func(b *testing.B) {
		b.Run("sssub_____________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := sssub(126, 127)
				_ = x
			}
		})
		b.Run("sssubbig__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := sssubbig(126, 127)
				_ = x
			}
		})
		b.Run("sssubadd__________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := sssubadd(126, 127)
				_ = x
			}
		})
		b.Run("sssubaddlessbranch", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := sssubaddlessbranch(126, 127)
				_ = x
			}
		})
		b.Run("sssubdirect_______", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := sssubdirect(126, 127)
				_ = x
			}
		})

	})
}

func BenchmarkSsmul(b *testing.B) {
	b.Run("random", func(b *testing.B) {
		const n = 1 << 16
		var as, bs [n]int8
		var fs [n]uint8
		for i := range as {
			as[i] = int8(i)
			bs[i] = int8(i)
			fs[i] = uint8(i)
		}
		shuffleSlice(as[:])
		shuffleSlice(bs[:])
		shuffleSlice(fs[:])
		b.Run("ssmul_________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := ssmul(as[j], bs[j], fs[j])
				_ = x
			}
		})
		b.Run("ssmulbig______", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := ssmulbig(as[j], bs[j], fs[j])
				_ = x
			}
		})
		b.Run("ssmulbigbranch", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				j := i % n
				x := ssmulbigbranch(as[j], bs[j], fs[j])
				_ = x
			}
		})

	})
	b.Run("small", func(b *testing.B) {
		b.Run("ssmul_________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ssmul(1, 2, 3)
				_ = x
			}
		})
		b.Run("ssmulbig______", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ssmulbig(1, 2, 3)
				_ = x
			}
		})
		b.Run("ssmulbigbranch", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ssmulbigbranch(1, 2, 3)
				_ = x
			}
		})

	})
	b.Run("big", func(b *testing.B) {
		b.Run("ssmul_________", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ssmul(126, 127, 6)
				_ = x
			}
		})
		b.Run("ssmulbig______", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ssmulbig(126, 127, 6)
				_ = x
			}
		})
		b.Run("ssmulbigbranch", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				x := ssmulbigbranch(126, 127, 6)
				_ = x
			}
		})

	})
}

func shuffleSlice[T any](ts []T) {
	rand.Shuffle(len(ts), func(i, j int) { ts[i], ts[j] = ts[j], ts[i] })
}
