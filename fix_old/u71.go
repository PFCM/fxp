// Code generated by by github.com/pfcm/fxp/fix/gen DO NOT EDIT.

package fix

import (
	"fmt"
	"math/bits"

	"golang.org/x/exp/constraints"
)

// import
var _ = bits.Len8(6)

// U71 is an unsigned 8 bit fixed point number with 1
// fractional bits, representing numbers between 0 and 127.5.
type U71 uint8

const (
	// MinU71 is the smallest U71: 0.
	MinU71 U71 = 0x00
	// MaxU71 is the largest U71: 127.5.
	MaxU71 U71 = 0xff
)

// U71ToFloat converts a U71 to a float value.
func U71ToFloat[T constraints.Float](u U71) T {
	return T(u) * 0.5
}

// U71FromFloat returns the nearest U71 to the provided
// float value.
func U71FromFloat[T constraints.Float](f T) U71 {
	if f < 0 {
		return 0
	}
	if f > 127.5 {
		return 0xff
	}
	// TODO: rounding? Then we would have to do it in SMul etc.
	return U71((f /*+0.2490234375*/) * 2)
}

// String returns a string representation of a U71.
func (u U71) String() string {
	return fmt.Sprintf("%.1f", U71ToFloat[float64](u))
}

// SAdd is a saturating addition betwenn two U71.
func (u U71) SAdd(v U71) U71 {
	return U71(usadd(uint8(u), uint8(v)))
}

// SSub is a saturating subtraction between two U71,
// subtracting v from u.
func (u U71) SSub(v U71) U71 {
	return U71(ussub(uint8(u), uint8(v)))
}

// SMul is a saturating multiply between two U71.
func (u U71) SMul(v U71) U71 {
	return U71(usmul(uint8(u), uint8(v), 1))
}
