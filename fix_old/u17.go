// Code generated by by github.com/pfcm/fxp/fix/gen DO NOT EDIT.

package fix

import (
	"fmt"
	"math/bits"

	"golang.org/x/exp/constraints"
)

// import
var _ = bits.Len8(6)

// U17 is an unsigned 8 bit fixed point number with 7
// fractional bits, representing numbers between 0 and 1.9921875.
type U17 uint8

const (
	// MinU17 is the smallest U17: 0.
	MinU17 U17 = 0x00
	// MaxU17 is the largest U17: 1.9921875.
	MaxU17 U17 = 0xff
)

// U17ToFloat converts a U17 to a float value.
func U17ToFloat[T constraints.Float](u U17) T {
	return T(u) * 0.0078125
}

// U17FromFloat returns the nearest U17 to the provided
// float value.
func U17FromFloat[T constraints.Float](f T) U17 {
	if f < 0 {
		return 0
	}
	if f > 1.9921875 {
		return 0xff
	}
	// TODO: rounding? Then we would have to do it in SMul etc.
	return U17((f /*+0.0038909912109375*/) * 128)
}

// String returns a string representation of a U17.
func (u U17) String() string {
	return fmt.Sprintf("%.7f", U17ToFloat[float64](u))
}

// SAdd is a saturating addition betwenn two U17.
func (u U17) SAdd(v U17) U17 {
	return U17(usadd(uint8(u), uint8(v)))
}

// SSub is a saturating subtraction between two U17,
// subtracting v from u.
func (u U17) SSub(v U17) U17 {
	return U17(ussub(uint8(u), uint8(v)))
}

// SMul is a saturating multiply between two U17.
func (u U17) SMul(v U17) U17 {
	return U17(usmul(uint8(u), uint8(v), 7))
}
