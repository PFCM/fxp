// Code generated by by github.com/pfcm/fxp/fix/gen DO NOT EDIT.

package fix

import (
	"fmt"

	"golang.org/x/exp/constraints"
)

// U26 is an unsigned 8 bit fixed point number with 6
// fractional bits, representing numbers between 0 and 3.984375, in steps
// of 0.01556396484375.
// Also occasionally useful for coefficients.
type U26 uint8

const (
	// MinU26 is the smallest U26: 0.
	MinU26 U26 = 0x00
	// MaxU26 is the largest U26: 3.984375.
	MaxU26 U26 = 0xff
)

// U26ToFloat converts a U26 to a float value.
func U26ToFloat[T constraints.Float](u U26) T {
	return T(u) * 0.015625
}

// U26FromFloat returns the nearest U26 to the provided
// float value.
func U26FromFloat[T constraints.Float](f T) U26 {
	if f < 0 {
		return 0
	}
	if f > 3.984375 {
		return 0xff
	}
	// TODO: rounding? Then we would have to do it in SMul etc.
	return U26((f /*+0.007781982421875*/) * 64)
}

// String returns a string representation of a U26.
func (u U26) String() string {
	return fmt.Sprintf("%.6f", U26ToFloat[float64](u))
}

// SAdd is a saturating addition betwenn two U26.
func (u U26) SAdd(v U26) U26 {
	return U26(usadd(uint8(u), uint8(v)))
}

// SSub is a saturating subtraction between two U26,
// subtracting v from u.
func (u U26) SSub(v U26) U26 {
	return U26(ussub(uint8(u), uint8(v)))
}

// SMul is a saturating multiply between two U26.
func (u U26) SMul(v U26) U26 {
	return U26(usmul(uint8(u), uint8(v), 6))
}
