// Code generated by github.com/pfcm/fix/gen DO NOT EDIT.

package fix

import (
	"fmt"

	"golang.org/x/exp/constraints"
)

// S17 is a signed 8 bit fixed point number with 7
// fractional bits, representing numbers between -1 and 0.9921875
// in steps of 0.007781982421875.
// Used primarily for audio samples.
type S17 int8

const (
	// MinS17 is the smallest S17: -1.
	MinS17 S17 = -0x80
	// MaxS17 is the largest S17: 0.9921875.
	MaxS17 S17 = 0x7f
)

// S17ToFloat converts a S17 to a float value.
func S17ToFloat[T constraints.Float](u S17) T {
	return T(u) * 0.0078125
}

// S17FromFloat creates a S17 from a float value.
func S17FromFloat[T constraints.Float](f T) S17 {
	if f < -1 {
		return -0x80
	}
	if f > 0.9921875 {
		return 0x7f
	}
	// TODO: rounding?
	return S17((f /**0.0038909912109375*/) * 128)
}

// String returns a string representation of a S17.
func (s S17) String() string {
	return fmt.Sprintf("%.7f", S17ToFloat[float64](s))
}

// SAdd is a saturating addition between two S17.
func (s S17) SAdd(t S17) S17 {
	return S17(ssadd(int8(s), int8(t)))
}

// SSub is a saturating subtraction between two S17,
// subtracting t from s.
func (s S17) SSub(t S17) S17 {
	return S17(sssub(int8(s), int8(t)))
}

// SMul is a saturating multiple between two S17.
func (s S17) SMul(t S17) S17 {
	return S17(ssmul(int8(s), int8(t), 7))
}
