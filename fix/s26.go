// Code generated by github.com/pfcm/fix/gen DO NOT EDIT.

package fix

import (
	"fmt"

	"golang.org/x/exp/constraints"
)

// S26 is a signed 8 bit fixed point number with 6
// fractional bits, representing numbers between -2 and 1.984375
// in steps of 0.01556396484375.
// Handy for some signed coefficients.
type S26 int8

const (
	// MinS26 is the smallest S26: -2.
	MinS26 S26 = -0x80
	// MaxS26 is the largest S26: 1.984375.
	MaxS26 S26 = 0x7f
)

// S26ToFloat converts a S26 to a float value.
func S26ToFloat[T constraints.Float](u S26) T {
	return T(u) * 0.015625
}

// S26FromFloat creates a S26 from a float value.
func S26FromFloat[T constraints.Float](f T) S26 {
	if f < -2 {
		return -0x80
	}
	if f > 1.984375 {
		return 0x7f
	}
	// TODO: rounding?
	return S26((f /**0.007781982421875*/) * 64)
}

// String returns a string representation of a S26.
func (s S26) String() string {
	return fmt.Sprintf("%.6f", S26ToFloat[float64](s))
}

// SAdd is a saturating addition between two S26.
func (s S26) SAdd(t S26) S26 {
	return S26(ssadd(int8(s), int8(t)))
}

// SSub is a saturating subtraction between two S26,
// subtracting t from s.
func (s S26) SSub(t S26) S26 {
	return S26(sssub(int8(s), int8(t)))
}

// SMul is a saturating multiple between two S26.
func (s S26) SMul(t S26) S26 {
	return S26(ssmul(int8(s), int8(t), 6))
}
