// Code generated by github.com/pfcm/fix/gen DO NOT EDIT.

package fix

import (
	"fmt"

	"golang.org/x/exp/constraints"
)

// S80 is a signed 8 bit fixed point number with 0
// fractional bits, representing numbers between -128 and 127
// in steps of 0.99609375.
// It is just a standard int8, but with saturating arithmetic and all the generated conversions.
type S80 int8

const (
	// MinS80 is the smallest S80: -128.
	MinS80 S80 = -0x80
	// MaxS80 is the largest S80: 127.
	MaxS80 S80 = 0x7f
)

// S80ToFloat converts a S80 to a float value.
func S80ToFloat[T constraints.Float](u S80) T {
	return T(u) * 1
}

// S80FromFloat creates a S80 from a float value.
func S80FromFloat[T constraints.Float](f T) S80 {
	if f < -128 {
		return -0x80
	}
	if f > 127 {
		return 0x7f
	}
	// TODO: rounding?
	return S80((f /**0.498046875*/) * 1)
}

// String returns a string representation of a S80.
func (s S80) String() string {
	return fmt.Sprintf("%.1f", S80ToFloat[float64](s))
}

// SAdd is a saturating addition between two S80.
func (s S80) SAdd(t S80) S80 {
	return S80(ssadd(int8(s), int8(t)))
}

// SSub is a saturating subtraction between two S80,
// subtracting t from s.
func (s S80) SSub(t S80) S80 {
	return S80(sssub(int8(s), int8(t)))
}

// SMul is a saturating multiple between two S80.
func (s S80) SMul(t S80) S80 {
	return S80(ssmul(int8(s), int8(t), 0))
}
