// Code generated by by github.com/pfcm/fxp/fix/gen DO NOT EDIT.

package fix

import (
	"testing"
)

func TestUsadd(t *testing.T) {
	t.Run("usadd", func(t *testing.T) {
		for a := 0; a < 256; a++ {
			for b := 0; b < 256; b++ {
				want := min(a+b, 255)
				got := usadd(uint8(a), uint8(b))
				if uint8(want) != got {
					t.Errorf("usadd(%x, %x) = %x, want: %x", uint8(a), uint8(b), got, want)
				}
			}
		}
	})
	t.Run("usaddpre", func(t *testing.T) {
		for a := 0; a < 256; a++ {
			for b := 0; b < 256; b++ {
				want := min(a+b, 255)
				got := usaddpre(uint8(a), uint8(b))
				if uint8(want) != got {
					t.Errorf("usaddpre(%x, %x) = %x, want: %x", uint8(a), uint8(b), got, want)
				}
			}
		}
	})
	t.Run("usaddpost", func(t *testing.T) {
		for a := 0; a < 256; a++ {
			for b := 0; b < 256; b++ {
				want := min(a+b, 255)
				got := usaddpost(uint8(a), uint8(b))
				if uint8(want) != got {
					t.Errorf("usaddpost(%x, %x) = %x, want: %x", uint8(a), uint8(b), got, want)
				}
			}
		}
	})
	t.Run("usaddpostbranchless", func(t *testing.T) {
		for a := 0; a < 256; a++ {
			for b := 0; b < 256; b++ {
				want := min(a+b, 255)
				got := usaddpostbranchless(uint8(a), uint8(b))
				if uint8(want) != got {
					t.Errorf("usaddpostbranchless(%x, %x) = %x, want: %x", uint8(a), uint8(b), got, want)
				}
			}
		}
	})

}

func TestUssub(t *testing.T) {
	t.Run("ussub", func(t *testing.T) {
		for a := 0; a < 256; a++ {
			for b := 0; b < 256; b++ {
				want := max(a-b, 0)
				got := ussub(uint8(a), uint8(b))
				if uint8(want) != got {
					t.Errorf("ussub(%x, %x) = %x, want: %x", uint8(a), uint8(b), got, want)
				}
			}
		}
	})
	t.Run("ussubbranch", func(t *testing.T) {
		for a := 0; a < 256; a++ {
			for b := 0; b < 256; b++ {
				want := max(a-b, 0)
				got := ussubbranch(uint8(a), uint8(b))
				if uint8(want) != got {
					t.Errorf("ussubbranch(%x, %x) = %x, want: %x", uint8(a), uint8(b), got, want)
				}
			}
		}
	})
	t.Run("ussubbranchless", func(t *testing.T) {
		for a := 0; a < 256; a++ {
			for b := 0; b < 256; b++ {
				want := max(a-b, 0)
				got := ussubbranchless(uint8(a), uint8(b))
				if uint8(want) != got {
					t.Errorf("ussubbranchless(%x, %x) = %x, want: %x", uint8(a), uint8(b), got, want)
				}
			}
		}
	})
	t.Run("ussubmin", func(t *testing.T) {
		for a := 0; a < 256; a++ {
			for b := 0; b < 256; b++ {
				want := max(a-b, 0)
				got := ussubmin(uint8(a), uint8(b))
				if uint8(want) != got {
					t.Errorf("ussubmin(%x, %x) = %x, want: %x", uint8(a), uint8(b), got, want)
				}
			}
		}
	})

}

func TestUsmul(t *testing.T) {
	t.Run("usmul", func(t *testing.T) {
		for a := 0; a < 256; a++ {
			for b := 0; b < 256; b++ {
				for f := 0; f < 8; f++ {
					want := min((a*b)>>f, 255)
					got := usmul(uint8(a), uint8(b), uint8(f))
					if uint8(want) != got {
						t.Errorf("usmul(%x, %x, %x) = %x, want: %x", uint8(a), uint8(b), f, got, want)
					}
				}
			}
		}
	})
	t.Run("usmulbig", func(t *testing.T) {
		for a := 0; a < 256; a++ {
			for b := 0; b < 256; b++ {
				for f := 0; f < 8; f++ {
					want := min((a*b)>>f, 255)
					got := usmulbig(uint8(a), uint8(b), uint8(f))
					if uint8(want) != got {
						t.Errorf("usmulbig(%x, %x, %x) = %x, want: %x", uint8(a), uint8(b), f, got, want)
					}
				}
			}
		}
	})
	t.Run("usmulbigmin", func(t *testing.T) {
		for a := 0; a < 256; a++ {
			for b := 0; b < 256; b++ {
				for f := 0; f < 8; f++ {
					want := min((a*b)>>f, 255)
					got := usmulbigmin(uint8(a), uint8(b), uint8(f))
					if uint8(want) != got {
						t.Errorf("usmulbigmin(%x, %x, %x) = %x, want: %x", uint8(a), uint8(b), f, got, want)
					}
				}
			}
		}
	})
	t.Run("usmulbigbranchless", func(t *testing.T) {
		for a := 0; a < 256; a++ {
			for b := 0; b < 256; b++ {
				for f := 0; f < 8; f++ {
					want := min((a*b)>>f, 255)
					got := usmulbigbranchless(uint8(a), uint8(b), uint8(f))
					if uint8(want) != got {
						t.Errorf("usmulbigbranchless(%x, %x, %x) = %x, want: %x", uint8(a), uint8(b), f, got, want)
					}
				}
			}
		}
	})
	t.Run("usmulbits", func(t *testing.T) {
		for a := 0; a < 256; a++ {
			for b := 0; b < 256; b++ {
				for f := 0; f < 8; f++ {
					want := min((a*b)>>f, 255)
					got := usmulbits(uint8(a), uint8(b), uint8(f))
					if uint8(want) != got {
						t.Errorf("usmulbits(%x, %x, %x) = %x, want: %x", uint8(a), uint8(b), f, got, want)
					}
				}
			}
		}
	})

}

func TestSsadd(t *testing.T) {
	t.Run("ssadd", func(t *testing.T) {
		for a := -128; a < 127; a++ {
			for b := -128; b < 127; b++ {
				want := min(max(a+b, -128), 127)
				got := ssadd(int8(a), int8(b))
				if int8(want) != got {
					t.Errorf("ssadd(%x, %x) = %x, want: %x", int8(a), int8(b), got, want)
				}
			}
		}
	})
	t.Run("ssaddbranch", func(t *testing.T) {
		for a := -128; a < 127; a++ {
			for b := -128; b < 127; b++ {
				want := min(max(a+b, -128), 127)
				got := ssaddbranch(int8(a), int8(b))
				if int8(want) != got {
					t.Errorf("ssaddbranch(%x, %x) = %x, want: %x", int8(a), int8(b), got, want)
				}
			}
		}
	})
	t.Run("ssaddbranchless", func(t *testing.T) {
		for a := -128; a < 127; a++ {
			for b := -128; b < 127; b++ {
				want := min(max(a+b, -128), 127)
				got := ssaddbranchless(int8(a), int8(b))
				if int8(want) != got {
					t.Errorf("ssaddbranchless(%x, %x) = %x, want: %x", int8(a), int8(b), got, want)
				}
			}
		}
	})
	t.Run("ssaddbig", func(t *testing.T) {
		for a := -128; a < 127; a++ {
			for b := -128; b < 127; b++ {
				want := min(max(a+b, -128), 127)
				got := ssaddbig(int8(a), int8(b))
				if int8(want) != got {
					t.Errorf("ssaddbig(%x, %x) = %x, want: %x", int8(a), int8(b), got, want)
				}
			}
		}
	})

}

func TestSssub(t *testing.T) {
	t.Run("sssub", func(t *testing.T) {
		for a := -128; a < 127; a++ {
			for b := -128; b < 127; b++ {
				want := min(max(a-b, -128), 127)
				got := sssub(int8(a), int8(b))
				if int8(want) != got {
					t.Errorf("sssub(%x, %x) = %x, want: %x", int8(a), int8(b), got, want)
				}
			}
		}
	})
	t.Run("sssubbig", func(t *testing.T) {
		for a := -128; a < 127; a++ {
			for b := -128; b < 127; b++ {
				want := min(max(a-b, -128), 127)
				got := sssubbig(int8(a), int8(b))
				if int8(want) != got {
					t.Errorf("sssubbig(%x, %x) = %x, want: %x", int8(a), int8(b), got, want)
				}
			}
		}
	})
	t.Run("sssubadd", func(t *testing.T) {
		for a := -128; a < 127; a++ {
			for b := -128; b < 127; b++ {
				want := min(max(a-b, -128), 127)
				got := sssubadd(int8(a), int8(b))
				if int8(want) != got {
					t.Errorf("sssubadd(%x, %x) = %x, want: %x", int8(a), int8(b), got, want)
				}
			}
		}
	})
	t.Run("sssubaddlessbranch", func(t *testing.T) {
		for a := -128; a < 127; a++ {
			for b := -128; b < 127; b++ {
				want := min(max(a-b, -128), 127)
				got := sssubaddlessbranch(int8(a), int8(b))
				if int8(want) != got {
					t.Errorf("sssubaddlessbranch(%x, %x) = %x, want: %x", int8(a), int8(b), got, want)
				}
			}
		}
	})
	t.Run("sssubdirect", func(t *testing.T) {
		for a := -128; a < 127; a++ {
			for b := -128; b < 127; b++ {
				want := min(max(a-b, -128), 127)
				got := sssubdirect(int8(a), int8(b))
				if int8(want) != got {
					t.Errorf("sssubdirect(%x, %x) = %x, want: %x", int8(a), int8(b), got, want)
				}
			}
		}
	})

}

func TestSsmul(t *testing.T) {
	t.Run("ssmul", func(t *testing.T) {
		for a := -128; a < 127; a++ {
			for b := -128; b < 127; b++ {
				for f := 0; f < 8; f++ {
					want := min(max((a*b)>>f, -128), 127)
					got := ssmul(int8(a), int8(b), uint8(f))
					if int8(want) != got {
						t.Errorf("ssmul(%x, %x, %x) = %x, want: %x", int8(a), int8(b), f, got, want)
					}
				}
			}
		}
	})
	t.Run("ssmulbig", func(t *testing.T) {
		for a := -128; a < 127; a++ {
			for b := -128; b < 127; b++ {
				for f := 0; f < 8; f++ {
					want := min(max((a*b)>>f, -128), 127)
					got := ssmulbig(int8(a), int8(b), uint8(f))
					if int8(want) != got {
						t.Errorf("ssmulbig(%x, %x, %x) = %x, want: %x", int8(a), int8(b), f, got, want)
					}
				}
			}
		}
	})
	t.Run("ssmulbigbranch", func(t *testing.T) {
		for a := -128; a < 127; a++ {
			for b := -128; b < 127; b++ {
				for f := 0; f < 8; f++ {
					want := min(max((a*b)>>f, -128), 127)
					got := ssmulbigbranch(int8(a), int8(b), uint8(f))
					if int8(want) != got {
						t.Errorf("ssmulbigbranch(%x, %x, %x) = %x, want: %x", int8(a), int8(b), f, got, want)
					}
				}
			}
		}
	})

}
